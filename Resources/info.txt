Hinzugefügte Properties:

- allowSaveAll - Speicherbutton für Alle Features
- markUnsavedFeatures - ungespeicherte Features haben speziellen Style
- deactivateControlAfterModification - Nach Veränderung von Feature wird Control deaktiviert


Hinweise:
- schema.featureType.geomType ist obligatorisch

Ideen:
- Features nach vorne setzen (z-index)

Ansprechen:
- Hack beim Hintergrundbild des Color Pickers
- Die ganze Funktionalität des Features Sortieren beim Neuladen scheint überflüssig zu sein
- Updaten von ClusterStrategy im Widget findet nicht im Callback von getData statt

Refactoring - Renaming:
- Konsistente Linie für Methodennamen, hinsichtlich des _ als Präfix
- Markiere JQuery Variablen mit $ Präfix

Refactoring - Code sortieren:
- Die current Variablen in Widget currentSchema und currentPopup sind schlechter Stil und gehören weg : currentSchema durch abgespeckte Version ersetzen, die Methoden beinhaltet, da kommen die contextMenu Methoden auch rein
- Helper Klasse/Datei für Feldlose Methoden anlegen, evtl. auch mehrere
- Evaluieren ob es sich lohnt, digitizingToolset den widget Status zu entziehen
- DataManagerUtils refactorn
- Properties in Scheme aussortieren und sortieren
- Auf die Hooks Rücksicht nehmen - am besten vorhandene Konfigurationen begutachten
- Herausfinden, warum Openlayers.Feature 'data', 'attributes' und 'properties' hat und gegebenenfalls eins wegwerfen
- Navigation auf Buttons über JQuery einschränken
- Alle "Evals" in seperate Funktionen auslagern, wo sie zugriff auf alle eventuell sie umgebenden Klassen haben
- Forbidden operations on server should NOT throw a 500
- feature.attributes.geomType und schema.featureType.geomType- variablen anders benennen
- Die ganze Style Map Geschichte im AllScheme ist suboptimal. Neues Model ausdenken und anwenden.
- Die Integration von vis-ui überschreibung weiter benutzen, zum abhängigen neuzeichnen von buttons
- nach speichern von style, style in schema feature styles einbinden
- Die Cluster Funktionalitäten in eigene Datei auslagern, die Methoden überschreibt
- Higlight Methoden wurden gestrichen - schauen ob was fehlt (insbesondere ResultTable anzeigen)
- Manche Funktionalitäten wie z.B. forEach Iteratoren tauchen sowohl als vanilla, als underscore und als jquery auf. Das ist schlecht.
- Für Spezialfälle (Clustering, OpenLayersCloud etc. Methoden überschreiben anstatt schalter einbauen)
- Context Menu in den Handler des Select Controls auslagern



Testing:
- Testen, was mit dem Formdata passiert wenn saveFeature außerhalb des FeatureEdit Dialogs aufgerufen wird
- Überprüfen, wie im Bahn Digitizer "alles" Layer sich die einzelnen Features hinsichtlich ihrer allow Properties im Resulttable verhalten
- Popup Einstellungen in Configuration


Selbstgemachte Bugs:


Legacy Bugs:


Optische Bugs:
- Zellengröße limitieren in ResultTable




Gemacht:
- In All geometries verschwindet unsaved feature markierung nicht
- Kontext-Menü Funktionen irgendwie in Schema auslagern
- Es muss entschieden werden, ob die properties für das all-layer im Server oder JS definiert werden sollen
- Translations auslagern / vereinheitlichen
- Kopieren testen
- Default Style in Style Widget richtig anzeigen
- Herausfinden, wann Geometrie "selected"-Eigenschaft verliert und das korrigieren
- Feature Style Fenster öffnet nicht mit aktuellem Style des Features sondern gelb
- Individueller Feature style wird nur im all scheme gesetzt
- Verhindern, dass Features am Anfang angezeigt werden, wenn kein Digitizer geöffnet ist.
- Nach ändern des Styles wird style nicht sofort sichtbar, da feature selected ist
- Feature Style wird nicht sofort gesetzt, sondern erst später (gabs auch bei der Bahn schon)
- Neu hinzugefügtes, ungespeichertes Feature aktiviert Allsave Button nicht
- Save All Features wird nicht mehr automatisch deaktiviert
- Die Schnittstelle von .table u.s.w. vereinheitlichen
- Zu viele Buttons in Feature Edit Dialog machen Layout kaputt
- Kollision der Control- und General Buttons im Sidebar verhindern
- hasOnlyOneTheme reparieren
- Aktivierung des individuellen save Buttons im resultTable verschwindet wieder
- Backend refactorn - da gibt es viel Bedarf, seit dem Einfügen von style. Der Bahn Approch ist wohl besser
- Donut mit "Trapez"-Form als ausgeschnittes Loch gilt im Rahmen von Postgres nicht mehr als valide geometrie und wird nicht geladen, wenn By CurrentExtent gesucht wird. Ansonsten schon.
- Wiederholter klick auf control führt zu js bug
- FeatureEdit Dialog wird nach Donut und Formveränderung nicht aufgerufen
- zugriff auf visui element in initializeResultTableEvents funktioniert nicht
- Die Feature.redraw Methode mit generischem Parameter ist scheiße. Ändern
- ResultTable spezifische Methoden in resultTable extension auslagern.
- bei der StyleMap wird nicht der geomType verwendet sondern irgendwas anderes. Ändern
- Nichtvalider Donut lässt gesamtes Polygon verschwinden
- Deaktivierung von DrawDonut muss zwei mal aufgerufen werden
- Unsaved Style verschwindet, wenn Features neu geladen werden (Refactoring Style)
- Kopiertes Feature und neues Feature bekommt nach Dragging wieder default Farbe














Von alleine verschwunden:
- Gewählter Druck Button im ResultTable verliert Farbe wenn über die jeweilige Reihe gehovert wird
- Nach Speichern von neuem Feature ist nur noch dieses im ResultTable

